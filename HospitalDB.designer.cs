#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RGRSUBD
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hospital")]
	public partial class HospitalDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDoctors(Doctors instance);
    partial void UpdateDoctors(Doctors instance);
    partial void DeleteDoctors(Doctors instance);
    partial void InsertMaps(Maps instance);
    partial void UpdateMaps(Maps instance);
    partial void DeleteMaps(Maps instance);
    partial void InsertWards(Wards instance);
    partial void UpdateWards(Wards instance);
    partial void DeleteWards(Wards instance);
    #endregion
		
		public HospitalDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Department
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Doctors> Doctors
		{
			get
			{
				return this.GetTable<Doctors>();
			}
		}
		
		public System.Data.Linq.Table<Maps> Maps
		{
			get
			{
				return this.GetTable<Maps>();
			}
		}
		
		public System.Data.Linq.Table<Wards> Wards
		{
			get
			{
				return this.GetTable<Wards>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _dap_Department;
		
		private int _dap_Ward_number;
		
		private EntityRef<Wards> _Wards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondap_DepartmentChanging(string value);
    partial void Ondap_DepartmentChanged();
    partial void Ondap_Ward_numberChanging(int value);
    partial void Ondap_Ward_numberChanged();
    #endregion
		
		public Department()
		{
			this._Wards = default(EntityRef<Wards>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dap_Department", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string dap_Department
		{
			get
			{
				return this._dap_Department;
			}
			set
			{
				if ((this._dap_Department != value))
				{
					this.Ondap_DepartmentChanging(value);
					this.SendPropertyChanging();
					this._dap_Department = value;
					this.SendPropertyChanged("dap_Department");
					this.Ondap_DepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dap_Ward_number", DbType="Int NOT NULL")]
		public int dap_Ward_number
		{
			get
			{
				return this._dap_Ward_number;
			}
			set
			{
				if ((this._dap_Ward_number != value))
				{
					if (this._Wards.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondap_Ward_numberChanging(value);
					this.SendPropertyChanging();
					this._dap_Ward_number = value;
					this.SendPropertyChanged("dap_Ward_number");
					this.Ondap_Ward_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wards_Department", Storage="_Wards", ThisKey="dap_Ward_number", OtherKey="w_Ward_number", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Wards Wards
		{
			get
			{
				return this._Wards.Entity;
			}
			set
			{
				Wards previousValue = this._Wards.Entity;
				if (((previousValue != value) 
							|| (this._Wards.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wards.Entity = null;
						previousValue.Department.Remove(this);
					}
					this._Wards.Entity = value;
					if ((value != null))
					{
						value.Department.Add(this);
						this._dap_Ward_number = value.w_Ward_number;
					}
					else
					{
						this._dap_Ward_number = default(int);
					}
					this.SendPropertyChanged("Wards");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _d_Doctor_FIO;
		
		private string _d_Specialization;
		
		private string _d_Salary;
		
		private EntitySet<Maps> _Maps;
		
		private EntitySet<Wards> _Wards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ond_Doctor_FIOChanging(string value);
    partial void Ond_Doctor_FIOChanged();
    partial void Ond_SpecializationChanging(string value);
    partial void Ond_SpecializationChanged();
    partial void Ond_SalaryChanging(string value);
    partial void Ond_SalaryChanged();
    #endregion
		
		public Doctors()
		{
			this._Maps = new EntitySet<Maps>(new Action<Maps>(this.attach_Maps), new Action<Maps>(this.detach_Maps));
			this._Wards = new EntitySet<Wards>(new Action<Wards>(this.attach_Wards), new Action<Wards>(this.detach_Wards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_d_Doctor_FIO", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string d_Doctor_FIO
		{
			get
			{
				return this._d_Doctor_FIO;
			}
			set
			{
				if ((this._d_Doctor_FIO != value))
				{
					this.Ond_Doctor_FIOChanging(value);
					this.SendPropertyChanging();
					this._d_Doctor_FIO = value;
					this.SendPropertyChanged("d_Doctor_FIO");
					this.Ond_Doctor_FIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_d_Specialization", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string d_Specialization
		{
			get
			{
				return this._d_Specialization;
			}
			set
			{
				if ((this._d_Specialization != value))
				{
					this.Ond_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._d_Specialization = value;
					this.SendPropertyChanged("d_Specialization");
					this.Ond_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_d_Salary", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string d_Salary
		{
			get
			{
				return this._d_Salary;
			}
			set
			{
				if ((this._d_Salary != value))
				{
					this.Ond_SalaryChanging(value);
					this.SendPropertyChanging();
					this._d_Salary = value;
					this.SendPropertyChanged("d_Salary");
					this.Ond_SalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Maps", Storage="_Maps", ThisKey="d_Doctor_FIO", OtherKey="m_Doctor_FIO")]
		public EntitySet<Maps> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Wards", Storage="_Wards", ThisKey="d_Doctor_FIO", OtherKey="w_Doctor_FIO")]
		public EntitySet<Wards> Wards
		{
			get
			{
				return this._Wards;
			}
			set
			{
				this._Wards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maps(Maps entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = this;
		}
		
		private void detach_Maps(Maps entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = null;
		}
		
		private void attach_Wards(Wards entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = this;
		}
		
		private void detach_Wards(Wards entity)
		{
			this.SendPropertyChanging();
			entity.Doctors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maps")]
	public partial class Maps : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _m_Map;
		
		private string _m_Surname;
		
		private string _m_Doctor_FIO;
		
		private string _m_Diagnosis;
		
		private string _m_Age;
		
		private string _m_Adress;
		
		private string _m_Profession;
		
		private string _m_Place_work;
		
		private string _m_Phone_number;
		
		private string _m_Characteristic;
		
		private int _m_Ward_number;
		
		private EntityRef<Doctors> _Doctors;
		
		private EntityRef<Wards> _Wards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onm_MapChanging(int value);
    partial void Onm_MapChanged();
    partial void Onm_SurnameChanging(string value);
    partial void Onm_SurnameChanged();
    partial void Onm_Doctor_FIOChanging(string value);
    partial void Onm_Doctor_FIOChanged();
    partial void Onm_DiagnosisChanging(string value);
    partial void Onm_DiagnosisChanged();
    partial void Onm_AgeChanging(string value);
    partial void Onm_AgeChanged();
    partial void Onm_AdressChanging(string value);
    partial void Onm_AdressChanged();
    partial void Onm_ProfessionChanging(string value);
    partial void Onm_ProfessionChanged();
    partial void Onm_Place_workChanging(string value);
    partial void Onm_Place_workChanged();
    partial void Onm_Phone_numberChanging(string value);
    partial void Onm_Phone_numberChanged();
    partial void Onm_CharacteristicChanging(string value);
    partial void Onm_CharacteristicChanged();
    partial void Onm_Ward_numberChanging(int value);
    partial void Onm_Ward_numberChanged();
    #endregion
		
		public Maps()
		{
			this._Doctors = default(EntityRef<Doctors>);
			this._Wards = default(EntityRef<Wards>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Map", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int m_Map
		{
			get
			{
				return this._m_Map;
			}
			set
			{
				if ((this._m_Map != value))
				{
					this.Onm_MapChanging(value);
					this.SendPropertyChanging();
					this._m_Map = value;
					this.SendPropertyChanged("m_Map");
					this.Onm_MapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string m_Surname
		{
			get
			{
				return this._m_Surname;
			}
			set
			{
				if ((this._m_Surname != value))
				{
					this.Onm_SurnameChanging(value);
					this.SendPropertyChanging();
					this._m_Surname = value;
					this.SendPropertyChanged("m_Surname");
					this.Onm_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Doctor_FIO", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string m_Doctor_FIO
		{
			get
			{
				return this._m_Doctor_FIO;
			}
			set
			{
				if ((this._m_Doctor_FIO != value))
				{
					if (this._Doctors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onm_Doctor_FIOChanging(value);
					this.SendPropertyChanging();
					this._m_Doctor_FIO = value;
					this.SendPropertyChanged("m_Doctor_FIO");
					this.Onm_Doctor_FIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Diagnosis", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string m_Diagnosis
		{
			get
			{
				return this._m_Diagnosis;
			}
			set
			{
				if ((this._m_Diagnosis != value))
				{
					this.Onm_DiagnosisChanging(value);
					this.SendPropertyChanging();
					this._m_Diagnosis = value;
					this.SendPropertyChanged("m_Diagnosis");
					this.Onm_DiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Age", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string m_Age
		{
			get
			{
				return this._m_Age;
			}
			set
			{
				if ((this._m_Age != value))
				{
					this.Onm_AgeChanging(value);
					this.SendPropertyChanging();
					this._m_Age = value;
					this.SendPropertyChanged("m_Age");
					this.Onm_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Adress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string m_Adress
		{
			get
			{
				return this._m_Adress;
			}
			set
			{
				if ((this._m_Adress != value))
				{
					this.Onm_AdressChanging(value);
					this.SendPropertyChanging();
					this._m_Adress = value;
					this.SendPropertyChanged("m_Adress");
					this.Onm_AdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Profession", DbType="VarChar(70)")]
		public string m_Profession
		{
			get
			{
				return this._m_Profession;
			}
			set
			{
				if ((this._m_Profession != value))
				{
					this.Onm_ProfessionChanging(value);
					this.SendPropertyChanging();
					this._m_Profession = value;
					this.SendPropertyChanged("m_Profession");
					this.Onm_ProfessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Place_work", DbType="VarChar(100)")]
		public string m_Place_work
		{
			get
			{
				return this._m_Place_work;
			}
			set
			{
				if ((this._m_Place_work != value))
				{
					this.Onm_Place_workChanging(value);
					this.SendPropertyChanging();
					this._m_Place_work = value;
					this.SendPropertyChanged("m_Place_work");
					this.Onm_Place_workChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Phone_number", DbType="VarChar(50)")]
		public string m_Phone_number
		{
			get
			{
				return this._m_Phone_number;
			}
			set
			{
				if ((this._m_Phone_number != value))
				{
					this.Onm_Phone_numberChanging(value);
					this.SendPropertyChanging();
					this._m_Phone_number = value;
					this.SendPropertyChanged("m_Phone_number");
					this.Onm_Phone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Characteristic", DbType="VarChar(300)")]
		public string m_Characteristic
		{
			get
			{
				return this._m_Characteristic;
			}
			set
			{
				if ((this._m_Characteristic != value))
				{
					this.Onm_CharacteristicChanging(value);
					this.SendPropertyChanging();
					this._m_Characteristic = value;
					this.SendPropertyChanged("m_Characteristic");
					this.Onm_CharacteristicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_m_Ward_number", DbType="Int NOT NULL")]
		public int m_Ward_number
		{
			get
			{
				return this._m_Ward_number;
			}
			set
			{
				if ((this._m_Ward_number != value))
				{
					if (this._Wards.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onm_Ward_numberChanging(value);
					this.SendPropertyChanging();
					this._m_Ward_number = value;
					this.SendPropertyChanged("m_Ward_number");
					this.Onm_Ward_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Maps", Storage="_Doctors", ThisKey="m_Doctor_FIO", OtherKey="d_Doctor_FIO", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctors Doctors
		{
			get
			{
				return this._Doctors.Entity;
			}
			set
			{
				Doctors previousValue = this._Doctors.Entity;
				if (((previousValue != value) 
							|| (this._Doctors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctors.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._Doctors.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._m_Doctor_FIO = value.d_Doctor_FIO;
					}
					else
					{
						this._m_Doctor_FIO = default(string);
					}
					this.SendPropertyChanged("Doctors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wards_Maps", Storage="_Wards", ThisKey="m_Ward_number", OtherKey="w_Ward_number", IsForeignKey=true)]
		public Wards Wards
		{
			get
			{
				return this._Wards.Entity;
			}
			set
			{
				Wards previousValue = this._Wards.Entity;
				if (((previousValue != value) 
							|| (this._Wards.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wards.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._Wards.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._m_Ward_number = value.w_Ward_number;
					}
					else
					{
						this._m_Ward_number = default(int);
					}
					this.SendPropertyChanged("Wards");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wards")]
	public partial class Wards : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _w_Ward_number;
		
		private int _w_Number_beds;
		
		private string _w_Doctor_FIO;
		
		private string _w_Staff;
		
		private EntitySet<Department> _Department;
		
		private EntitySet<Maps> _Maps;
		
		private EntityRef<Doctors> _Doctors;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onw_Ward_numberChanging(int value);
    partial void Onw_Ward_numberChanged();
    partial void Onw_Number_bedsChanging(int value);
    partial void Onw_Number_bedsChanged();
    partial void Onw_Doctor_FIOChanging(string value);
    partial void Onw_Doctor_FIOChanged();
    partial void Onw_StaffChanging(string value);
    partial void Onw_StaffChanged();
    #endregion
		
		public Wards()
		{
			this._Department = new EntitySet<Department>(new Action<Department>(this.attach_Department), new Action<Department>(this.detach_Department));
			this._Maps = new EntitySet<Maps>(new Action<Maps>(this.attach_Maps), new Action<Maps>(this.detach_Maps));
			this._Doctors = default(EntityRef<Doctors>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_w_Ward_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int w_Ward_number
		{
			get
			{
				return this._w_Ward_number;
			}
			set
			{
				if ((this._w_Ward_number != value))
				{
					this.Onw_Ward_numberChanging(value);
					this.SendPropertyChanging();
					this._w_Ward_number = value;
					this.SendPropertyChanged("w_Ward_number");
					this.Onw_Ward_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_w_Number_beds", DbType="Int NOT NULL")]
		public int w_Number_beds
		{
			get
			{
				return this._w_Number_beds;
			}
			set
			{
				if ((this._w_Number_beds != value))
				{
					this.Onw_Number_bedsChanging(value);
					this.SendPropertyChanging();
					this._w_Number_beds = value;
					this.SendPropertyChanged("w_Number_beds");
					this.Onw_Number_bedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_w_Doctor_FIO", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string w_Doctor_FIO
		{
			get
			{
				return this._w_Doctor_FIO;
			}
			set
			{
				if ((this._w_Doctor_FIO != value))
				{
					if (this._Doctors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onw_Doctor_FIOChanging(value);
					this.SendPropertyChanging();
					this._w_Doctor_FIO = value;
					this.SendPropertyChanged("w_Doctor_FIO");
					this.Onw_Doctor_FIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_w_Staff", DbType="VarChar(100)")]
		public string w_Staff
		{
			get
			{
				return this._w_Staff;
			}
			set
			{
				if ((this._w_Staff != value))
				{
					this.Onw_StaffChanging(value);
					this.SendPropertyChanging();
					this._w_Staff = value;
					this.SendPropertyChanged("w_Staff");
					this.Onw_StaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wards_Department", Storage="_Department", ThisKey="w_Ward_number", OtherKey="dap_Ward_number")]
		public EntitySet<Department> Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				this._Department.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wards_Maps", Storage="_Maps", ThisKey="w_Ward_number", OtherKey="m_Ward_number")]
		public EntitySet<Maps> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctors_Wards", Storage="_Doctors", ThisKey="w_Doctor_FIO", OtherKey="d_Doctor_FIO", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Doctors Doctors
		{
			get
			{
				return this._Doctors.Entity;
			}
			set
			{
				Doctors previousValue = this._Doctors.Entity;
				if (((previousValue != value) 
							|| (this._Doctors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctors.Entity = null;
						previousValue.Wards.Remove(this);
					}
					this._Doctors.Entity = value;
					if ((value != null))
					{
						value.Wards.Add(this);
						this._w_Doctor_FIO = value.d_Doctor_FIO;
					}
					else
					{
						this._w_Doctor_FIO = default(string);
					}
					this.SendPropertyChanged("Doctors");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Department(Department entity)
		{
			this.SendPropertyChanging();
			entity.Wards = this;
		}
		
		private void detach_Department(Department entity)
		{
			this.SendPropertyChanging();
			entity.Wards = null;
		}
		
		private void attach_Maps(Maps entity)
		{
			this.SendPropertyChanging();
			entity.Wards = this;
		}
		
		private void detach_Maps(Maps entity)
		{
			this.SendPropertyChanging();
			entity.Wards = null;
		}
	}
}
#pragma warning restore 1591
